import { AddAccessModal, getScheduleEmpData } from "./api";
import {
  loginDasboardService,
  rosterService,
  teamsService,
  rosterSettingService,
  timesheetsService,
  rosterSettingWorkPlanService,
  rosterSettingWorkRotationService,
  rosterSettingSplitShiftService,
  demandTemplateDetailbyId,
  rosterSettingDemandTemplateService,
  manageTeamService,
  managerDashboard,
  productivityDashboard,
  selfService,
  payrollAudit,
  submitPayrollAudit,
  lineData,
  history,
  needCorrection,
  viewSave,
  submitReadyForPayroll,
  accessControl,
  ManageSchedulerProfile,
} from "./gatewatProxy";

export const apiConstant = {
  login: loginDasboardService + "auth/login",
  projectList: loginDasboardService + "dashboard/user/project/list",
  dashboardList:
    timesheetsService + "dashboard/project/employee/timesheet/data",
  timehseetById: loginDasboardService + "get/employee/project/timehseet/data",
  getAllProject: loginDasboardService + "get/all/projects",
  getAllTask: loginDasboardService + "get/all/tasks",
  getAllExpenditure: loginDasboardService + "get/all/expenditure",

  getTeamList: teamsService + "teamsData/list",
  getRequestList: teamsService + "get/request/list",
  getRequestTypeList: teamsService + "get/request/types/list",
  getResionList: teamsService + "get/request/reasons/list",
  createRequestData: teamsService + "create/request",
  getSourceRoaster: teamsService + "get/sourceRoster",
  getDestinationRoster: teamsService + "get/destinationRoster",
  getRequestDetails: teamsService + "get/request/details",
  approveHistoryDetails: teamsService + "get/approval/history",

  payrollTtimehseetById:
    timesheetsService + "get/employee/payroll/timehseet/data",
  getDepartments: timesheetsService + "get/all/departments",
  getPayCodes: timesheetsService + "get/all/paycodes",
  allTimesheetMaster: timesheetsService + "get/all/timesheet/master/data",
  getJobs: timesheetsService + "get/all/jobs",
  // allTimesheetMaster: timesheetsService + "get/all/timesheet/master/data",
  submitPersonTimesheet: timesheetsService + "submit/person/timesheet",
  savePersonTimesheet: timesheetsService + "save/person/payroll/timesheet/data",
  deletePersonTimesheet:
    timesheetsService + "delete/person/payroll/timesheet/data",

  getprofileist: rosterService + "profile/list",
  getallRoasterProfileData: rosterService + "profile/list/300000006565312",
  getallRoasterEmpDetailTableData: rosterService + "personRosterData",
  getWorkDurationData: rosterService + "workDuration",
  getAddStaffData: rosterService + "searchStaff/list",
  getWorkLocationList: rosterService + "workLocation/list/300000006565312/3038",
  getOnCallLovList: rosterService + "onCallLov/list",
  getEmergencyList: rosterService + "emergencyLov/list",
  postOption: rosterService + "assignSpotRosterOption1",
  getDepartMentList: rosterService + "department/list/300000006565312/3038",
  getJobTitleList: rosterService + "jobTitle/list/300000006565312/3038",
  getDutyManagerList: rosterService + "dutyManager/list/300000006565312/3038",
  postOption2: rosterService + "assignSpotRosterOption2",
  DeleteRoster: rosterService + "personRosterData",
  getUpdateSingleShift: rosterService + "personRosterData",
  saveRosterProfile: rosterService + "personRosterData",

  getDemandTemplats: rosterService + "demandTemplates",
  getDemandId: rosterService + "demandTemplates",
  // getDemandTemplats: rosterService + "demandTemplates",
  getEmployeeSuggestions: rosterService + "demandTemplates/employeeSuggestions",
  createEmployeeSuggestions:
    rosterService + "demandTemplates/employeeSuggestions/createRoster",
  getworkRotation: rosterService + "rota/workRotationPlan",
  getWorkRotationDet: rosterService + "rota/workRotationPlanDetails",
  generateRotaShifts: rosterService + "rota/generateRotaShifts",
  createFlexRota: rosterService + "rota/createFlexRota",
  personRosterDataWithDate: rosterService + "personRosterDataWithDate",
  validateRoster: rosterService + "demandTemplates/validate/validateRoster",

  getSummaryData: rosterSettingService + "get/work-duration",
  createWorkDuration: rosterSettingService + "create/work-duration",
  getWorkDurationCategory: rosterSettingService + "get/catagories",
  getBussinessUnitData: rosterSettingService + "get/business-units",
  getLegalEntityData: rosterSettingService + "get/legal-entities",
  getDepartmentLov: rosterSettingService + "get/departments",
  getDetailData: rosterSettingService + "get/details",
  DeleteWorkDurationData: rosterSettingService + "delete",
  getCriteriaDetail: rosterSettingService + "get/criteria",

  getWorkPlanDetail: rosterSettingWorkPlanService + "get",
  getDemandTempDetail: demandTemplateDetailbyId + "get",
  postWorkPlan: rosterSettingWorkPlanService + "create",
  updateWorkPlan: rosterSettingWorkPlanService + "update",
  deleteWorkPlanDetail: rosterSettingWorkPlanService + "delete",

  getWorkRotationData: rosterSettingWorkRotationService + "get",

  getWorkRotationDataById: rosterSettingWorkRotationService + "get",
  createWorkRotationData: rosterSettingWorkRotationService + "create",
  updateWorkRotationData: rosterSettingWorkRotationService + "update",
  deleteWorkRotationData: rosterSettingWorkRotationService + "delete",

  getSplitShiftTableData: rosterSettingSplitShiftService + "get",
  getSplitShiftTableDatabyId: rosterSettingSplitShiftService + "get",
  getSplitShiftSelectData: rosterSettingSplitShiftService + "selectShift/get",
  getSplitSelectData: rosterSettingSplitShiftService + "selectShift/get",
  createSplitShiftData: rosterSettingSplitShiftService + "create",
  UpdateSplitShiftData: rosterSettingSplitShiftService + "update",
  deleteSplitShiftData: rosterSettingSplitShiftService + "delete",

  getManageTeamTableData: manageTeamService + "get",
  getManageTeamTableDataById: manageTeamService + "get",
  getMangeTeamOpenFromValueList: manageTeamService + "openFromValueList",
  createTeam: manageTeamService + "create",
  manageTeamMemberTableData: manageTeamService + "manageTeamMembers/get",
  createTeamMember: manageTeamService + "manageTeamMembers/create",
  updateTeam: manageTeamService + "update",
  deleteTeam: manageTeamService + "delete",
  getDemandTempData: rosterSettingDemandTemplateService + "get/by/profileId",
  getDemandTempDataById: rosterSettingDemandTemplateService + "get",
  createDemandTempData: rosterSettingDemandTemplateService + "create",
  updateDemandTempData: rosterSettingDemandTemplateService + "update",

  getSkillData: rosterSettingDemandTemplateService + "skills",
  getCitizenShipData: rosterSettingDemandTemplateService + "citizenships",
  getallProfileData: rosterService + "profile/list",
  getDepartMentData: rosterService + "department/list",
  getJobTitleData: rosterService + "jobTitle/list",
  getWorkLocationData: rosterService + "workLocation/list",
  getMonthdata: managerDashboard + "get/pay/periods",
  getCostCenterView: managerDashboard + "get/cost/center/view/data",
  getPersonView: managerDashboard + "get/person/view/data",
  getEmployeeDetail: managerDashboard + "get/EmployeeDetail/Data",
  productivityData:
    productivityDashboard + "project/employee/productivity/data",
  getTimeZoneData: selfService + "userpreference/timeZone/get",
  createVactionRule: selfService + "vacationRules/create",
  updateVacationRule: selfService + "vacationRules/update",
  taskData: selfService + "vacationRules/get/task",
  userData: selfService + "vacationRules/user/get",
  vacationRule: selfService + "vacationRules/get",
  searchUser: selfService + "vacationRules/user/get/search",
  payrollAudit: payrollAudit,
  submitPayrollAudit: submitPayrollAudit,
  lineData: lineData,
  history: history,
  needCorrection: needCorrection,
  viewSave: viewSave,
  submitReadyForPayroll: submitReadyForPayroll,
  manageAccessRoleGet: accessControl + "get/manage/role/details",
  taskGroupGet: accessControl + "get/tasksName",
  userList: accessControl + "get/fullName",
  taskGroupDetails: accessControl + "get/taskGroup/details",
  saveUserRole: accessControl + "save/userRole/Details",
  deleteRole: accessControl + "delete",
  manageAccessRoleGet: accessControl + "api/get/manage/role/deatils",
  taskGroupGet: accessControl + "api/getTaskGroupDetails",
  userList: accessControl + "api/getListOfFullName",
  getScheduleProfileData: ManageSchedulerProfile + "get/user/profile/details",
  getScheduleEmpData: ManageSchedulerProfile + "get/employee/list/details",
  getScheduleUserData: ManageSchedulerProfile + "get/user/details",
  getProfileCriteria: ManageSchedulerProfile + "get/employee/profile/criteria",
  getScheduleJobTitle: ManageSchedulerProfile + "get/job/details",
  getScheduleJobFamily: ManageSchedulerProfile + "get/job/family",
  getEmployeeCatogery: ManageSchedulerProfile + "get/employee/catogery",
  getDepartmentDetail: ManageSchedulerProfile + "get/department",
  getSubDepartmentDetail: ManageSchedulerProfile + "get/sub/department",

  getPayrollDetails: ManageSchedulerProfile + "get/payroll/name",
  getReligionDetails: ManageSchedulerProfile + "get/lookup/code",
};
